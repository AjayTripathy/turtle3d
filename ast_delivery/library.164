def False = 0
def True = 1

def _while(c, b){
	def t = c()
	if(t) {
		b()
		_while(c,b)
	} else {
		null
	}
}


#def _for(e,s) {
#	def t = e()
#	if (t == null){
#		null	
#	}else{
#		s(t)
#		_for(e, s)	
#	}
#}

#0 = iterator, 1 = dictionary/list
def _for(e,s) {
	def x = type(e)
	if (x == 0) {
		def t = e()
		if (t == null){
			null	
		}else{
			s(t)
			_for(e, s)	
		}
	} else {
		def q = _getIterator_(e)
		_for(q,s)
	}
}

def _and(a,b) {
	def x = a()
	if (x) {
		def y = b()
		if (y) {
			True
		} else {
			False
		}
	} else {
		False
	}
}

def _or(a,b) {
	def x = a()
	if (x == 0) {
		def y = b()
		if (y == 0) {
			False
		} else {
			True
		}
	} else {
		True
	}
}

#def _dictfor(l,s) {
#	def e = _getIterator_(l)
#	def t = e()
#	_for(e,s)
#}

#TODO: Uncomment these as you make progress on your interpreter

# Return an iterator for a list list is a dictionary this iterator iterates
# over keys 0 .. len(list)-1 If want, you can use that function when desugaring
# for.
def _getIterator_(list) {
    print "ASKDJALKHFDKLASHDKJLAHSDKJALSHDAJKLSDHAKSDJHASKLJD"
    def q = 0-1
    def l = len(list)
    print list[0]
    if (list[0] == null){
      list = keys(list)
    }
    lambda() {
         q = q + 1
         if (q < l) { list[q]
         } else { null } # terminates iteration
    }
}


def _comprehension(func, lst) {
	map(func,lst)
}


def not(b) {if (b) {False} else {True}}
def max(x,y) {if (x < y) {y} else {x}}

#Turn a coroutine into an iterator
def wrap(lam, arg) {
	def co = coroutine(lam)
	lambda() {
	    resume(co, arg)
	}
}

# append o to list; return the list
def append(list,o) {
    list[len(list)]=o
}

def range(stop){
  def x = {}
  def rangedHelp(i){
    if (i < stop){
      append(x, i)
      rangedHelp(i + 1)
    } else{ x } 

  }
  rangedHelp(0)
}


# return the n first elements of list
def take_from(list, n) {
    def res = {}
    def i = 0
    for (x in list) {
        if (i >= n) {
            append(res, x)
        }
        i = i + 1
    }
    res
}

# duplicate a list
def copy(list) {
    def res = {}
    for (x in list) {
        append(res, x)
    }
    res
}

# tail of a list
def tail(list) {
    def res = {}
    def first = True
    for (x in list) {
        if (first) {
            first = False
        } else {
            append(res, x)
        }
    }
    res
}

#functional map on a list
def map(fun, list) {
    def res = {}
    for (x in list) {
        append(res, fun(x))
    }
    res
}

# functional fold/reduce on a list
def fold(zero, fun, list) {
    def res = zero
    for (x in list) {
        res = fun(res, x)
    }
    res
}

